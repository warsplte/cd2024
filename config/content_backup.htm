<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://warsplte.github.io/cd2024/">https://warsplte.github.io/cd2024/</a></p>
<p>網誌: <a href="https://warsplte.github.io/cd2024/blog">https://warsplte.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://warsplte.github.io/cd2024/reveal">https://warsplte.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/warsplte/cd2024.git">https://github.com/warsplte/cd2024.git</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>LaTex(翻譯32-42)</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">\documentclass[12pt,a4paper]{report}  %紙張設定
\usepackage{xeCJK}%中文字體模組
\setCJKmainfont{TW-Kai} %設定中文字體
\usepackage[top=3cm, bottom=2cm, left=3cm, right=3cm, a4paper]{geometry}
\usepackage{graphicx}
\usepackage{textcomp}
\hoffset=-5mm %調整左右邊界
\voffset=-8mm %調整上下邊界
\usepackage{amsmath}
\setlength{\parindent}{2em}
\newfontfamily\sectionef{Times New Roman}

%%%%正文%%%%%
\begin{document}
\hspace*{-1.5cm}\includegraphics[width=1\textwidth,height=0.5\textwidth]{1.png}\\[0.5cm]
\begin{center}
\textbf{圖14 部件A的等距視圖}\\[0.5cm]
\end{center}
\setlength{\parindent}{2em}選擇這種特定材料的主要原因是其韌性、良好的尺寸穩定性（冷卻後尺寸變化的抵抗力）、高衝擊抗性和表面硬度。最後，它還常見於3D列印絲材料，可用於擠出式3D列印機，這在原型製作過程中應該非常有用。\\[2cm]

\textbf{4.1.2 部件B和C}\\

\setlength{\parindent}{2em}B和C部件是蓋子，應該能夠卡入位，關閉系統。這些是非常簡單的部件，需要一定程度的彈性，以便能夠變形以確保無螺紋組裝。這兩個相同的部件將使用聚氨酯彈性體（TPU）製造，因為其具有彈性和出色的拉伸和撕裂強度。這種聚合物通常用於生產需要橡膠樣彈性的部件。TPU在高溫下表現良好，通常用於電動工具、電纜絕緣和體育用品。最後，TPU也可以作為3D列印機的絲材料，用於模擬中的原型製作。\\
\newpage
\hspace*{-1.5cm}\includegraphics[width=1\textwidth,height=0.5\textwidth]{2.png}\\[0.5cm]
\begin{center}
\textbf{ 圖15 零件B和C}
\end{center}
\textbf{ 4.1.3. 模具}\\

理想情況下，所有模具應該由鋼材製成，以確保模具和產品質量的持久性。
雖然如此，所選擇的注塑塑料對所有零件的壓力要求不那麼高，它們的形式也不那麼復雜，因此可以假設用精密CNC加工的鋁模具應該足以生產所述的零件。\\

還假設所有模具都足夠簡單，可以使用3D列印進行原型製作。儘管這並非始終如此，但已確定對於本次模擬來說具有代表性。這些原型使用的材料類型是使用SLA 3D打印機固化的高溫樹脂。此外，模具將被視為在生產過程中需要開發的主要實體方面，因為它直接影響生產，同時可以在內部生產並跟踪其作為產品的情況。\\

\textbf{4.2. 模擬過程中的分析}\\

考慮到圖9中所示的圖表，以及在第3.1節中描述的PLM和MES成功整合的主要方面，此實驗旨在就表1中所描述的以下相關問題進行評論。
\newpage
\begin{center}
\textbf{表1 需要回答的問題摘要}\\   
\end{center}
\begin{table}
    \centering
    \begin{tabular}{l|p{8cm}}
        
       類別 &amp; 問題\\[1cm]
       \hline
軟體如何處理項目  &amp; 所有產品生命周期的方面都有被代表嗎？每個方面的代表程度如何？ \\[1cm]\hline
創建一個全新的產品有多容易 &amp; 產品如何描述？產品如何整合和參考相關文件？更改一個是否會影響另一個？\\[1cm]\hline
創建全新的生產過程有多容易&amp;生產過程是如何描述的？生產過程如何整合和參考其所生產的產品？更改其中一個是否會影響另一個？ \\[1cm]\hline
改善現有產品有多容易&amp;更新其元數據有多容易？
確定更改的影響有多容易？
軟體如何處理不同的產品修訂版本？ \\[1cm]\hline
        
改善現有的生產過程有多容易&amp;更新生產過程的元數據有多容易？
確定更改的影響有多容易？
軟體如何處理不同的生產過程修訂版本\\
         &amp; 
尋找生產數字有多容易？
Odoo 如何生成性能數據？
軟體如何呈現由升級引起的性能變化？\\[1cm]\hline
    \end{tabular}
    \label{tab:my_label}
\end{table}
\newpage
\begin{center}
{\fontsize{24pt}{0pt}\textbf{第五章}}\\[18pt]
{\fontsize{24pt}{0pt}\Large \textbf{Odoo軟體}}\\[1cm]
\end{center}
\textbf{5.1. Odoo軟體介紹}\\[0.5cm]
\indent Odoo是一款商業管理軟體，與開源社區關係密切。最初作為開源ERP軟體開發，因其價格實惠、直觀且擅長整合和擴展而受到廣泛歡迎。隨著公司業務的迅速增長，其商業模式逐漸轉變，包括提供企業付費版本和在線服務。\\[0.5cm]
\indent 如第2.2節所述，現代ERP系統通常是模塊化的，而在Odoo的情況下，這種模塊化特別明顯，因為社區開發的模塊和公司開發的高度集成的模塊提供了令人難以置信的擴展。正是這種可擴展性使得這款軟體對PLM+MES整合這一主題如此重要，因為在其製造模塊中存在用於PLM以及顯著的MES功能的模塊。\\[0.5cm]
\indent 在本論文的範圍內，目標是利用這款軟體管理先前提到的虛構公司，並得出關於PLM和MES整合在該系統中已經存在的有效性的結論。\\[0.5cm]
\textbf{5.1.1. 它是如何運作的}\\[0.5cm]
\indent 該軟體可以安裝在大多數x86架構的電腦上，並支援多個操作系統，包括Windows和所有主要的Linux發行版。\\[0.5cm]
\indent 理想情況下，Odoo軟體安裝在連接到本地區域網絡的電腦上，並啟動一個SQL數據庫，該數據庫包含企業生成的所有必要信息和文件（見圖16）。該電腦基本上作為服務器工作，其他位於網絡中的機器通過瀏覽器訪問它。這台電腦可以是專用服務器，也可以是正在使用的工作桌面，但重要的是要記住，它必須在軟體需要運行的整個時間內保持開機並連接著。\\[0.5cm]
\newpage
\hspace*{-1cm}\includegraphics[width=1\textwidth,height=0.75\textwidth]{3.png}\\[0.5cm]
\begin{center}
\textbf{圖16 Odoo配置A的功能圖}\\[0.5cm]
\end{center}
\hspace*{2em}另一個選擇是使用Odoo SA提供的托管服務（見圖17）。在這種情況下，系統將由他們托管，數據將存儲在他們的雲端。對於許多小型企業來說，這是一個很好的選擇，特別是如果他們特別喜歡與網站相關的模塊（用於構建和管理網站和電子商店）。然而，這取決於網絡，這在某些情況下可能會造成問題。\\[0.5cm]
\newpage
\hspace*{-1cm}\includegraphics[width=1\textwidth,height=0.75\textwidth]{4.png}\\[0.5cm]
\begin{center}
\textbf{圖17 Odoo配置B的功能圖}\\[0.5cm]
\end{center}
\hspace*{2em}用戶基本上通過圖形用戶界面（GUI）與系統互動，並使用它來根據每個用戶的需要訪問不同的模塊。這意味著可以對不同的用戶施加限制，以便對業務活動的不同方面進行控制，例如，會計人員將可以訪問會計模塊、銷售模塊和庫存模塊，但將被限制訪問製造模塊。這種限制確保了只有適當的員工才能對流程進行控制。\\[0.5cm]
\newpage
在該GUI中，不同的模塊顯示為應用程式圖標（見圖18），從一開始，公司就可以使用合理選擇的經過良好整合的應用程式，更不用說有一個充滿社區製作的模塊的龐大應用程式商店。\\[0.5cm]
\hspace*{-1.25cm}\includegraphics[width=1.25\textwidth,height=0.5\textwidth]{5.png}\\[0.15cm]
\begin{center}
\textbf{圖18 Odoo在配置B中的GUI截圖}\\[0.25cm]    
\end{center}
\hspace*{2em}Odoo認為任何製造工作的責任都分散在不同的公司部門中，每個部門負責特定的文件類型，並使用特定的應用程式進行處理（見表2）。從PLM的角度來看，這非常積極，因為如(Saaksvuori和Immonen，2008)所述，關於用戶權限管理 - PLM系統用於定義信息訪問和維護權限。 PLM系統定義了誰可以創建新的信息或進行製作、檢查和接受變更，以及那些僅允許查看系統中的信息或文檔的人。當涉及將PLM與其他系統集成時，用戶權限管理通常是一個挑戰。\\[0.2cm]
\begin{center}
\textbf{表2 部門與文件/應用程式的相關性}\\[0.25cm]    
\end{center}

%\begin{table}
    \centering
    \begin{tabular}{l|8cm}
         \textbf{\Large 部門}&amp;\textbf{\Large 文件/應用程式} \\[0.2cm] \hline
         工程&amp;CAD和BOM \\[0.2cm] \hline
         製造工程&amp;工藝路線、工作表、工作中心 \\[0.2cm] \hline
         採購/採購&amp;採購訂單、報價請求 \\[0.2cm] \hline
         庫存操作員&amp;收貨、條碼 \\[0.2cm] \hline
         製造主管&amp;製造訂單、計劃 \\[0.2cm] \hline
         製造操作員&amp;工作訂單 \\[0.2cm] \hline
         庫存操作員&amp;交貨\\[0.2cm] \hline
         品質&amp;警報、分析、控制點 \\[0.2cm] \hline
    \end{tabular}
    \label{tab:my_label}
%\end{table}
\newpage
\begin{table}
    \centering
    \begin{tabular}{l|8cm}
    \textbf{\Large 部門}&amp;\textbf{\Large 文件/應用程式} \\[0.2cm] \hline
         工程&amp;工程變更訂單 \\[0.2cm] \hline
         維護&amp;預防性/矯正性 \\[0.2cm] \hline
    \end{tabular}
    \label{tab:my_label}
\end{table}

\raggedright\hspace*{2em}從Odoo的角度來看，在通常的製造過程中，首先是工程師使用CAD軟件設計產品。一旦完成，他們將創建一個物料清單（BOM），這是生產產品所需的零件或材料的清單。此時，重點轉移到製造過程本身。\\[0.5cm]
\hspace*{2em}軟體對過程的視角主要集中在工藝路線、工作表和工作中心，這由製造工程團隊負責。工藝路線是產品在生產過程中所經歷的一系列步驟。工作表是針對製造操作員的指示，而工作中心則是生產活動進行的地方。Odoo認為這些是將工程師的計劃付諸實施所需的要求。\\[0.5cm]
\hspace*{2em}採購部門將負責請求報價（RFQ）或採購訂單（PO）。庫存操作員根據這些PO負責收貨，通常在Odoo中使用條碼應用程式完成。正如本章的第一節所解釋的，Odoo主要是一個ERP系統，正是在這一點上可以注意到一些ERP中心化的特徵，比如對庫存和資源管理的關注。這將在接下來的章節中進一步分析，但值得指出的是，這些RFQ和PO被視為數據庫中的項目。\\[0.5cm]
\hspace*{2em}只有在擁有設計、流程和所需材料時，Odoo才認為製造是可能的。然後，製造主管將創建一個製造訂單（MO），並通過工作訂單（WO）和工作中心管理製造操作員的計劃。然後，製造操作員可以按照工作訂單開始生產。產品生產完成後，它們將自動出現在庫存數據庫中，並由庫存部門負責包裝和交貨。\\[0.5cm]
\hspace*{2em}Odoo認為品質團隊負責指定控制/檢查點，以及識別產品或生產中可能存在的問題。這些品質控制檢查點從MES的角度來看非常有趣，因為它代表著寶貴的生產數據，該數據在生產過程中實時收集，即在每個產品生產後，可以指定一個尺寸檢查點，加工人員將填寫尺寸以隨時間跟踪品質。\\[0.5cm]
\hspace*{2em}如果存在設計問題或有改進的可能性，可以發出工程變更訂單（ECO）。這將回到製造工程團隊手中，並將專注於更新文件和BOM。ECO是Odoo跟踪系\\[0.5cm]
\newpage
\hspace*{2em}統內變更的核心。這在考慮PLM時非常重要，實際上也是Odoo名為PLM的應用程式的重點。該應用程式能夠實現到什麼程度，將在下一節中進行討論。\\[1cm]
\textbf{5.1.3. Odoo的信息結構}\\[0.5cm]
\hspace*{2em}每個模塊都專注於操作特定的面向對象的類，這些類在數據庫中保存元數據。這些是虛擬項目，負責將產品生命周期的各個方面虛擬化，正如（第3.1節）所述。不同類型的項目具有不同類型的賬戶，保存不同類型的數據，例如，產品項目代表特定產品，保存與其互動和使用相關的元數據，以及與其密切相關的其他可能項目的鏈接，如負責的用戶或製造所需的材料清單。Odoo通過其瀏覽器界面使所有這些信息都可以訪問和交互（見圖19和圖20）。為了保持一致，本文將特定項目表示（例如，螺栓）稱為“項目”，將項目類型（產品）稱為“項目類”。\\[0.5cm]
\includegraphics[width=1\textwidth,height=0.6\textwidth]{6.png}\\[0.15cm]
\begin{center}
\textbf{圖19 Odoo界面示例，涉及項目}\\
\end{center}
\includegraphics[width=1\textwidth,height=0.6\textwidth]{7.png}\\[0.15cm]
\begin{center}
\textbf{圖20 由GUI顯示的特定項目及其元數據的示例}\\[1cm]
\end{center}
\hspace*{2em}在Odoo中，有幾種類型的項目類（一些保存了大量的元數據，一些保存了很少），它們之間有不同程度的關係和整合。由於本工作的範圍僅限於PLM和MES的功能，因此重點放在與它們相關的項目上。下面的章節將對Odoo製造過程的主要7個項目類進行簡要解釋，因為基本的理解有助於讀者跟隨模擬。這些在以下圖（圖21）中表示。其他與製造過程無關的項目將在模擬過程中介紹。\\
\newpage
\includegraphics[width=1\textwidth,height=1\textwidth]{8.png}\\[0.15cm]
\begin{center}
\textbf{圖21 產品X製造的簡化項目關係圖}\\
\end{center}
\textbf{5.1.3.1. 產品項目}\\[0.5cm]
\hspace*{2em}每種材料、零件或產品都由一個PRODUCT類型的類別來描述，這個類別主要保存和管理在Odoo的庫存應用中。這意味著在系統中，產品的生產取決於其他產品的可用性，這些產品要麼是按原樣購買的，要麼是從其他產品中製造出來的（見圖22），即原材料也被視為產品，更具體地說，是購買的產品，然後包含在BOM中以製造其他產品。這被認為是主要的項目類別，因為它既是製造的來源，也是目標。\\
\end{document}</pre>
<pre class="brush:plain;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h1>Codespaces</h1>
<p><a href="https://github.com/odespaces">https://github.com/odespaces</a></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>